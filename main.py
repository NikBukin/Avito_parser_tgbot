import telebot
from telebot import types
import time
import pandas as pd
from keyboa import Keyboa

import avito_parser
import config
import users_par

bot = telebot.TeleBot(config.token, skip_pending=True)

user_dict = {}


class User:
    def __init__(self, userid):
        self.userid = userid

        self.userfirstname = None
        self.userlastname = None

        self.start_quest = None

        self.param_city = None
        self.param_interval = None
        self.param_item = None
        self.param_price = None


# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç—É–ø–∞

users = list(pd.read_csv('users_card.csv', delimiter=',')['userid'])


# –∫–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start']
    , func=lambda message: message.chat.id in users
                     )
def send_start(message):
    user_card_p = pd.read_csv('users_card.csv', delimiter=',')
    if message.chat.id in list(user_card_p['userid']):
        chat_id = message.chat.id
        userid = message.chat.id
        user = User(userid)
        user_dict[chat_id] = user
        user.userfirstname = message.chat.first_name
        user.userlastname = message.chat.last_name

        text_list = ["üí∏ –•–∞–ª—è–≤–∞", "üí∞ –ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ", "üéõÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"]

        complete_keyboa = Keyboa(items=text_list, copy_text_to_callback=True)

        bot.send_message(message.chat.id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É –¥–µ—à–µ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ "
                                                     "*A–≤–∏—Ç–æ*!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–≤–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞–±–æ—Ç—ã "
                                                     "–±–æ—Ç–∞:\n\n* - –ü–û–ò–°–ö –•–ê–õ–Ø–í–´*\n_–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ "
                                                     "–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º_\n\n* - –ü–û–ò–°–ö –ü–û "
                                                     "–ó–ê–î–ê–ù–ù–û–ô –¶–ï–ù–ï*\n_–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ_",
                               reply_markup=complete_keyboa(), parse_mode="Markdown")
        bot.send_message(message.chat.id,
                         text="–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
                         parse_mode="Markdown")


@bot.message_handler(content_types=['–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'])
def send_welcome(message):
    user_card_p = pd.read_csv('users_card.csv', delimiter=',')
    if message.chat.id in list(user_card_p['userid']):
        chat_id = message.chat.id
        userid = message.chat.id
        user = User(userid)
        user_dict[chat_id] = user
        user.userfirstname = message.chat.first_name
        user.userlastname = message.chat.last_name

        text_list = ["üí∏ –•–∞–ª—è–≤–∞", "üí∞ –ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ", "üéõÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"]

        complete_keyboa = Keyboa(items=text_list, copy_text_to_callback=True)


        msg = bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:"
                                                     "\n\n* - –ü–û–ò–°–ö –•–ê–õ–Ø–í–´*\n_–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ "
                                                     "–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º_\n\n* - –ü–û–ò–°–ö –ü–û "
                                                     "–ó–ê–î–ê–ù–ù–û–ô –¶–ï–ù–ï*\n_–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ_",
                               reply_markup=complete_keyboa(), parse_mode="Markdown")


@bot.message_handler(content_types=['text'])
def start_bot(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.stat_quest = message.text
    if message.text == "–•–∞–ª—è–≤–∞":
        free_item_def(message)
    elif message.text == "–ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ":
        find_by_price_def(message),
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã":
        change_param_city_def(message)

    if not (message.text == "–•–∞–ª—è–≤–∞" or message.text == "–ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ" or message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
            or message.text == "/start" or message.text == "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
        msg = bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        bot.register_next_step_handler(msg, start_bot)


def free_item_def(message):
    pass


def find_by_price_def(message):
    pass


def change_param_city_def(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i in config.goroda:
        markup.add(types.KeyboardButton(i))

    msg = bot.send_message(message.chat.id,
                           text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤",
                           reply_markup=markup, parse_mode="Markdown")

    bot.register_next_step_handler(msg, change_param_interval_def)


def change_param_interval_def(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.param_city = message.text
    if message.text == "/start":
        send_welcome(message)
    elif message.text in config.goroda:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in config.time_interval:
            markup.add(types.KeyboardButton(i))

        msg = bot.send_message(message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ —Å –∫–∞–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞",
                               reply_markup=markup, parse_mode="Markdown")

        bot.register_next_step_handler(msg, change_param_item_def)
    if not (message.text in config.goroda or message.text == "/start" or message.text == "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
        msg = bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        bot.register_next_step_handler(msg, start_bot)


def change_param_item_def(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.param_interval = message.text
    if message.text == "/start":
        send_welcome(message)
    elif message.text in config.time_interval:
        markup = types.ReplyKeyboardRemove()

        msg = bot.send_message(message.chat.id, text="–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–∫–∞—Ç—å?"
                                                     "\n\n_–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã_",
                               reply_markup=markup, parse_mode="Markdown")

        bot.register_next_step_handler(msg, change_param_price_def)


def change_param_price_def(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.param_item = message.text
    markup = types.ReplyKeyboardRemove()

    msg = bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–µ–ª—å–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—á–∏—Å–ª–æ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)"
                                                 "\n\n_–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ¬´–ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ¬ª_",
                           reply_markup=markup, parse_mode="Markdown")

    bot.register_next_step_handler(msg, change_param_final_def)


def change_param_final_def(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.param_price = message.text
    if message.text == "/start":
        send_welcome(message)
    elif message.text.isdigit():
        print(user.param_interval)
        print(user.param_price)
        print(user.param_item)
        print(user.param_city)
        markup = types.ReplyKeyboardRemove()

        msg = bot.send_message(message.chat.id, text="–û—Ç–ª–∏—á–Ω–æ, –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
                                                     "\n –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º:",
                               reply_markup=markup, parse_mode="Markdown")
        text_params = "üõí –¢–æ–≤–∞—Ä - {}\n" \
                      "üí∞ –ü—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ - {}\n" \
                      "üèô –ì–æ—Ä–æ–¥ - {}\n" \
                      "‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª - {}\n".format(user.param_item, user.param_price, user.param_city,
                                                 user.param_interval)
        users_par.save_param(user.userid, user.userfirstname, user.userlastname, user.param_city, user.param_interval,
                             user.param_price, user.param_item)
        bot.send_message(message.chat.id, text=text_params, parse_mode="Markdown")

        send_welcome(message)


@bot.callback_query_handler(func=lambda message: True)
def callback_inline(call):
    chat_id = call.from_user.id
    user = user_dict[chat_id]
    print(call.data)
    if call.data == 'üéõÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in config.goroda:
            markup.add(types.KeyboardButton(i))

        msg = bot.send_message(chat_id,
                               text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤",
                               reply_markup=markup, parse_mode="Markdown")

        bot.register_next_step_handler(msg, change_param_interval_def)

    if call.data == 'üí∏ –•–∞–ª—è–≤–∞':
        avito_parser.AvitoParse(url="https://www.avito.ru/all/bytovaya_elektronika?cd=1&q=%D0%BE%D1%82%D0%B4%D0%B0%D0%BC+%D0%B1%D0%B5%D1%81%D0%BF%D0%BB%D0%B0%D1%82%D0%BD%D0%BE",
                                count = 1,
                                version_main=116,
                                items=["iphone","—Ç–µ–ª–µ–≤–∏–∑–æ—Ä"]
                                ).parse()
        print("–ø–æ–∏—Å–∫ –∑–∞–∫–æ–Ω—á–µ–Ω")
        pass

    if call.data == 'üí∞ –ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ':
        pass











# if __name__ == '__main__':
#     while True:
#         try:
#             bot.polling(none_stop=True, skip_pending=True)
#         except Exception as e:
#             time.sleep(3)
#             print(e)


bot.polling(none_stop=True, skip_pending=True)
